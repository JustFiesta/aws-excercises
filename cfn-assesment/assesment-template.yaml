AWSTemplateFormatVersion: '2010-09-09'
Description: 'Main infrastructure setup with private network, load balancer, Lambda, and other required resources'

Parameters:
  EnvironmentName:
    Type: String
    Default: 'dev'
    Description: 'Environment name for resource tagging'
  
  VpcCIDR:
    Type: String
    Default: '10.0.0.0/16'
    Description: 'CIDR block for VPC'

Mappings:
  SubnetConfig:
    Subnets:
      Private:
        - CIDR: '10.0.1.0/24'
          AZ: 0
          Name: 'private-1'
        - CIDR: '10.0.2.0/24'
          AZ: 1
          Name: 'private-2'
      Public:
        - CIDR: '10.0.3.0/24'
          AZ: 0
          Name: 'public-1'
        - CIDR: '10.0.4.0/24'
          AZ: 1
          Name: 'public-2'

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-vpc

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-igw

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Private Subnets using ForEach
  PrivateSubnets:
    Type: AWS::CloudFormation::Macro
    Properties:
      Fn::ForEach::PrivateSubnet:
        - Value: !FindInMap ['SubnetConfig', 'Subnets', 'Private']
        - Type: AWS::EC2::Subnet
          Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [$.AZ, !GetAZs '']
            CidrBlock: $.CIDR
            Tags:
              - Key: Name
                Value: !Sub ${EnvironmentName}-${$.Name}
              - Key: Type
                Value: Private

  # Public Subnets using ForEach
  PublicSubnets:
    Type: AWS::CloudFormation::Macro
    Properties:
      Fn::ForEach::PublicSubnet:
        - Value: !FindInMap ['SubnetConfig', 'Subnets', 'Public']
        - Type: AWS::EC2::Subnet
          Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [$.AZ, !GetAZs '']
            CidrBlock: $.CIDR
            MapPublicIpOnLaunch: true
            Tags:
              - Key: Name
                Value: !Sub ${EnvironmentName}-${$.Name}
              - Key: Type
                Value: Public

  # Application Load Balancer
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-alb-sg

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets: !Split [',', !Join [',', [!Ref PublicSubnet1, !Ref PublicSubnet2]]]
      Type: application
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-alb

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: ip
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30

  # Secrets Manager
  SecretManagerSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${EnvironmentName}-app-secrets
      Description: Secret for application
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName

  # S3 Bucket
  StorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::AccountId}-${EnvironmentName}-storage
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName

  # Lambda Function
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda function
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-lambda-sg

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: !Sub ${EnvironmentName}-lambda-custom-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !GetAtt StorageBucket.Arn
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref SecretManagerSecret

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${EnvironmentName}-app-function
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const s3 = new AWS.S3();
          const secretsManager = new AWS.SecretsManager();

          exports.handler = async (event) => {
            try {
              // Get secret
              const secretData = await secretsManager.getSecretValue({
                SecretId: process.env.SECRET_ARN
              }).promise();
              
              // List files in bucket
              const bucketContents = await s3.listObjects({
                Bucket: process.env.BUCKET_NAME
              }).promise();
              
              return {
                statusCode: 200,
                body: JSON.stringify({
                  secret: secretData.SecretString,
                  files: bucketContents.Contents.map(item => item.Key)
                })
              };
            } catch (error) {
              console.error(error);
              return {
                statusCode: 500,
                body: JSON.stringify({ error: 'Internal server error' })
              };
            }
          }
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          SECRET_ARN: !Ref SecretManagerSecret
          BUCKET_NAME: !Ref StorageBucket
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds: !Split [',', !Join [',', [!Ref PrivateSubnet1, !Ref PrivateSubnet2]]]
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName

Outputs:
  VpcId:
    Description: 'VPC ID'
    Value: !Ref VPC
    Export:
      Name: !Sub ${EnvironmentName}-VpcId

  PrivateSubnetIds:
    Description: 'Private Subnet IDs'
    Value: 
      Fn::ForEach::PrivateSubnetOutput:
        - Value: !FindInMap ['SubnetConfig', 'Subnets', 'Private']
        - !Ref 'PrivateSubnet${$.Name}'
    Export:
      Name: !Sub ${EnvironmentName}-PrivateSubnetIds

  PublicSubnetIds:
    Description: 'Public Subnet IDs'
    Value:
      Fn::ForEach::PublicSubnetOutput:
        - Value: !FindInMap ['SubnetConfig', 'Subnets', 'Public']
        - !Ref 'PublicSubnet${$.Name}'
    Export:
      Name: !Sub ${EnvironmentName}-PublicSubnetIds
  LoadBalancerDNS:
    Description: 'ALB DNS Name'
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub ${EnvironmentName}-LoadBalancerDNS

  BucketName:
    Description: 'Storage Bucket Name'
    Value: !Ref StorageBucket
    Export:
      Name: !Sub ${EnvironmentName}-BucketName

  SecretARN:
    Description: 'Secret Manager ARN'
    Value: !Ref SecretManagerSecret
    Export:
      Name: !Sub ${EnvironmentName}-SecretARN

  LambdaFunctionName:
    Description: 'Lambda Function Name'
    Value: !Ref LambdaFunction
    Export:
      Name: !Sub ${EnvironmentName}-LambdaFunctionName