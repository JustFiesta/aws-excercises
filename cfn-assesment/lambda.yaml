AWSTemplateFormatVersion: '2010-09-09'
Description: 'Assesment template for Lambda function'

Parameters:
  EnvironmentName:
    Type: String
    Default: 'dev'
  VpcId:
    Type: String
  PrivateSubnetId1:
    Type: String
  PrivateSubnetId2:
    Type: String
  BucketName:
    Type: String
  SecretArn:
    Type: String

Resources:
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for Lambda'
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0 # temporary
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-lambda-sg

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      PermissionsBoundary: !Sub "arn:aws:iam::${AWS::AccountId}:policy/DefaultBoundaryPolicy"
      Policies:
        - PolicyName: !Sub ${EnvironmentName}-lambda-storage-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Sub arn:aws:s3:::${BucketName}
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Sub arn:aws:s3:::${BucketName}/*
        - PolicyName: !Sub ${EnvironmentName}-lambda-secrets-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref SecretArn

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${EnvironmentName}-app-function
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Code:
        S3Bucket: !Sub ${BucketName}
        S3Key: function.zip
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 256
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnetId1
          - !Ref PrivateSubnetId2
      Environment:
        Variables:
          SECRET_ARN: !Ref SecretArn
          BUCKET_NAME: !Ref BucketName
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName

Outputs:
  LambdaFunctionArn:
    Value: !GetAtt LambdaFunction.Arn
    Export:
      Name: !Sub ${EnvironmentName}-LambdaFunctionArn

  LambdaSecurityGroupId:
    Value: !Ref LambdaSecurityGroup
    Export:
      Name: !Sub ${EnvironmentName}-LambdaSecurityGroupId