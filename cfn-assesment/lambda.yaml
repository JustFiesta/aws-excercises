AWSTemplateFormatVersion: '2010-09-09'
Description: 'Assesment template for Lambda function'


Parameters:
  EnvironmentName:
    Type: String
    Default: 'dev'

Resources:
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for Lambda'
      VpcId: !ImportValue dev-VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !ImportValue dev-ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-lambda-sg

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: !Sub ${EnvironmentName}-lambda-storage-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !GetAtt StorageBucket.Arn
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Sub "${StorageBucket.Arn}/*"
        - PolicyName: !Sub ${EnvironmentName}-lambda-secrets-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref SecretManagerSecret

  StorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${EnvironmentName}-storage-bucket"

  SecretManagerSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${EnvironmentName}/app-secret"
      SecretString: '{"username": "admin", "password": "supersecret"}'

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${EnvironmentName}-app-function
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');

          // Konfiguracja klientów AWS SDK
          const s3 = new AWS.S3({
              endpoint: `https://s3.${process.env.AWS_REGION}.amazonaws.com`,
              region: process.env.AWS_REGION
          });

          const secretsManager = new AWS.SecretsManager({
              endpoint: `https://secretsmanager.${process.env.AWS_REGION}.amazonaws.com`,
              region: process.env.AWS_REGION
          });

          exports.handler = async (event) => {
              try {
                  console.log("Otrzymano żądanie, testujemy połączenie z Vault i Storage Account.");

                  // Pobranie sekretu z Secrets Managera
                  console.log("Pobieranie sekretu...");
                  const secretData = await secretsManager.getSecretValue({
                      SecretId: process.env.SECRET_ARN
                  }).promise();
                  console.log("Sekret pobrany pomyślnie.");

                  // Pobranie listy plików w S3
                  console.log("Listowanie plików w S3...");
                  const bucketContents = await s3.listObjectsV2({
                      Bucket: process.env.BUCKET_NAME
                  }).promise();
                  console.log("Lista plików pobrana pomyślnie.");

                  return {
                      statusCode: 200,
                      body: JSON.stringify({
                          message: "Połączenie działa!",
                          secret: secretData.SecretString,
                          files: bucketContents.Contents ? bucketContents.Contents.map(item => item.Key) : []
                      })
                  };
              } catch (error) {
                  console.error("Błąd podczas obsługi żądania:", error);
                  return {
                      statusCode: 500,
                      body: JSON.stringify({ error: "Błąd wewnętrzny serwera" })
                  };
              }
          };
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 256
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !ImportValue dev-PrivateSubnetId
      Environment:
        Variables:
          SECRET_ARN: !Ref SecretManagerSecret
          BUCKET_NAME: !Ref StorageBucket
          AWS_REGION: !Ref AWS::Region
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
Outputs:
  LambdaFunctionName:
    Value: !Ref LambdaFunction
    Export:
      Name: !Sub ${EnvironmentName}-LambdaFunctionName

  LambdaSecurityGroup:
    Value: !Ref LambdaSecurityGroup
    Export:
      Name: !Sub ${EnvironmentName}-LambdaSecurityGroup

  StorageBucketName:
    Value: !Ref StorageBucket
    Export:
      Name: !Sub ${EnvironmentName}-StorageBucketName

  SecretManagerSecret:
    Value: !Ref SecretManagerSecret
    Export:
      Name: !Sub ${EnvironmentName}-SecretManagerSecret